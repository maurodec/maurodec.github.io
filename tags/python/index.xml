<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Blog - maurodec.com</title>
    <link>http://maurodec.com/tags/python/</link>
    <description>Recent content in Python on Blog - maurodec.com</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 07 Feb 2021 00:00:00 -2100</lastBuildDate><atom:link href="http://maurodec.com/tags/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Python Decorators</title>
      <link>http://maurodec.com/blog/decorators/</link>
      <pubDate>Sun, 07 Feb 2021 00:00:00 -2100</pubDate>
      
      <guid>http://maurodec.com/blog/decorators/</guid>
      <description>&lt;p&gt;Originally described in the &amp;ldquo;Design Patterns: Elements of Reusable
Object-Oriented Software&amp;rdquo; book, decorators are a powerful design pattern that
allows us to extend or augment an object&amp;rsquo;s functionality. In this post I will
show with some practical examples how this can be achieved in Python via the
&lt;code&gt;@decorator&lt;/code&gt; syntax.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python Classes, namedtuples and __slots__</title>
      <link>http://maurodec.com/blog/classes-namedtuples-slots/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>http://maurodec.com/blog/classes-namedtuples-slots/</guid>
      <description>&lt;p&gt;Data types are needed in pretty much every program that needs to store and
manipulate data. These types usually have little to no behavior and simply
exist to keep track of information in a structured and orderly way. Recently,
&lt;a href=&#34;https://www.python.org/dev/peps/pep-0557/&#34;&gt;PEP 557 (Data Classes)&lt;/a&gt; was
accepted, however, it won&amp;rsquo;t appear until Python 3.7.&lt;/p&gt;
&lt;p&gt;In this Blog Post we will explore what options currently exist in Python 2.7
and 3.6 and how they differ from each other.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Amet - Flattening a Python dictionary as environment variables</title>
      <link>http://maurodec.com/blog/amet/</link>
      <pubDate>Thu, 20 Apr 2017 00:00:00 -0300</pubDate>
      
      <guid>http://maurodec.com/blog/amet/</guid>
      <description>&lt;p&gt;I recently had to build an ETL job in Python that was initially going to be
deployed on AWS. Little did I know that a last minute change from AWS to
Heroku would cause me to change how the job&amp;rsquo;s configuration was going to be
read significantly.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why I learned Python</title>
      <link>http://maurodec.com/blog/learning-python/</link>
      <pubDate>Fri, 07 Apr 2017 00:00:00 -0300</pubDate>
      
      <guid>http://maurodec.com/blog/learning-python/</guid>
      <description>&lt;p&gt;About eleven years ago, after finishing my first semester in University I
decided to learn how to program in Python. In this post I will talk about why I
found Python interesting at the time as well as how it felt to me as someone
with little programming knowledge.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
